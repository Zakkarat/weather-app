{"version":3,"sources":["stylesheets\\main.scss","stylesheets\\_include-media.scss"],"names":[],"mappings":"AAuEA,KACI,UAAW,CACX,YAEJ,KAGI,0DAAuC,CAUvC,iCAZA,UAAW,CACX,WAAY,CAEZ,mBAAa,CACb,mBAAmB,CACnB,YAAA,CACA,wBAAgB,CACnB,qBAAA,oBAED,uBAAY,CACR,oBAAW,CACH,6BCwdR,WAAQ,CDldZ,YAAM,mCASE,oBAKR,8CACI,MACA,WACH,0FAGG,MACH,gBACD,eAGI,mBAAY,CACZ,mBAAgB,CAChB,YAAA,CACA,wBAAQ,CACR,0CAKH,SAAA,YACD,SAGI,kBAAgB,CAEhB,WAAS,CAGT,0BApIW,CAqId,iBAAA,CAED,gCAAO,CACH,oCARA,UAAA,CAEA,eAAgB,CAChB,wBAAY,yBASZ,YAAa,CAKb,2BAAe,CAClB,4BAAA,2BACD,qBAAa,CAEZ,kDANA,mBAAA,qBACD,oBAWI,wBAAgB,CAChB,qBAAe,CACf,oCAIH,gBAAA,gBACD,8BAIC,4BAGG,kCAIJ,WAAc,CACV,wBAAY,CACZ,gBAAgB,CAChB,eAAa,CAChB,cAAA,mBAED,gBAAc,CACV,kBAAa,CACb,sBAAgB,CAChB,kEAKJ,wBAAM,CACF,sBAAW,CACX,sCAIH,mBAAA,qBAED,YAAY,CACR,uBAAkB,CAClB,oBAAe,CACf,sBAAgB,CAChB,SAAU,CACb,6CAKG,sEACA,mBAAe,CACf,mBAAkB,CACrB,2BAQA,eAAA,YAED,UAAY,CACR,wBAAY,CACZ,mCAIA,UAAA,CACA,YAAa,CACb,iBAAkB,CACrB,kEACD,cASA,aANA,wBAAkB,CACd,cAAA,gBAKJ,mCA9KI,UAAY,CACZ,gCAhEqB,CAiPrB,iBAAkB,CAClB,cAAY,CACZ,6BANJ,WAeA,kCALQ,6BAAW,CACX,kBAIR,YACI,WAAS,CAGb,mBAAkB,CACd,mBAAW,CACX,YAAY,CACZ,2BAAqB,CACrB,4BAAY,CACZ,yBAAqB,CACrB,qBAAiB,CACjB,uBAAkB,CAClB,oBAAW,CAIH,sBAAO,CAClB,wBAAA,uBC8RW,qDD5RZ,mBAGC,wBAAA,eAED,aA1QI,SAAA,CACA,WAAA,CACA,UAAU,CACV,6BAAU,CACV,wBAAc,CAKV,iBAjBK,CAoRZ,eAAA,oBCqRG,sBAAsB,CDvR1B,8BCuRI,yCDnRJ,+BA1PQ,UA7BA,CAyRP,WAAA,sBCiRG,8DAAwB,CDnR5B,oBAAc,iBApPmB,kBAsPhC,wBCiRG,+FAAA,oGDjRH,sDAlOuC,aAkOvC,uDACD,iBAAA,CAvRI,SAAO,CACP,qBAAa,CAKb,aAAa,CACb,yDAMI,qBA4QP,YC8QG,sFAAA,yBD5QJ,6CAnQQ,cAqQP,UC0QG,gHAAA,+GAAA,8GAAA,kCD1QH","file":"main.64867c1d.css","sourceRoot":"..\\src","sourcesContent":["@import 'include-media';\r\n$main: #0f162fe6;\r\n$main-dark: #081029;\r\n$Roboto: 'Open Sans', sans-serif;\r\n$Exo: 'Exo 2', sans-serif;\r\n$pos: 2%;\r\n$posout: -40%;\r\n@mixin sidebars($left: false) {\r\n    width: 241px;\r\n    height: 282px;\r\n    $trueposout: $posout;\r\n    @include media(\">0px\", \"<1210px\") {\r\n        width: 160px;\r\n    };\r\n    border-radius: 15px;\r\n    background-color: $main;\r\n    position: absolute;\r\n    top: 27.5%;\r\n    transition: 1s;\r\n\r\n    @if $left {\r\n        left: $posout;\r\n        } @else {\r\n        right: $posout;\r\n        }\r\n        @include media(\">0px\", \"<845px\") {\r\n            top: 54%;\r\n            width: 220px;\r\n        }\r\n}\r\n@mixin sidebarsAct($left: false) {\r\n    @if $left {\r\n        left: $pos;\r\n        } @else {\r\n        right: $pos;\r\n        }\r\n        @include media(\">0px\", \"<845px\") {\r\n            @if $left {\r\n                left: $pos +18%;\r\n                } @else {\r\n                right: $pos + 18%;\r\n                }\r\n                @include media(\">0px\", \"<750px\") {\r\n                    @if $left {\r\n                        left: $pos +13%;\r\n                        } @else {\r\n                        right: $pos + 13%;\r\n                        }\r\n                }\r\n                @include media(\">0px\", \"<640px\") {\r\n                    @if $left {\r\n                        left: $pos;\r\n                        } @else {\r\n                        right: $pos;\r\n                        }\r\n                }\r\n                @include media(\">0px\", \"<460px\") {\r\n                    @if $left {\r\n                        left: $pos - 2%;\r\n                        } @else {\r\n                        right: $pos - 2%;\r\n                        }\r\n                }\r\n        }\r\n}\r\n\r\n@mixin default-text {\r\n    color: white;\r\n    font-family: $Exo;\r\n}\r\n\r\nhtml {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\nbody {\r\n    width: 100%;\r\n    height: 100%;\r\n    background-image: url('/img/night.png');\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    overflow: hidden;\r\n}\r\n\r\n.fix-to-max {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.main {\r\n    width: 576px;\r\n    height: 490px;\r\n    background-color: $main;\r\n    border-radius: 15px;\r\n    @include media(\">0px\", \"<1210px\") {\r\n        width: 476px;\r\n        @include media(\">0px\", \"<845px\") {\r\n            margin-top: -94%\r\n        }\r\n    }\r\n\r\n}\r\n\r\n.search-block {\r\n    display: flex;\r\n    justify-content: space-around;\r\n}\r\n.search-form {\r\n    width: 60%;\r\n    height: 35px;\r\n}\r\n.search {\r\n    border-radius: 15px;\r\n    width: 100%;\r\n    height: 100%;\r\n    margin-top: 20px;\r\n    background-color: #081029;\r\n    border: 2.5px solid #252f4e;\r\n    text-align: center;\r\n    color: white;\r\n    font-family: $Roboto;\r\n    font-size: 20px;\r\n    \r\n}\r\n.display-day {\r\n    width: 100%;\r\n    height: 176px;\r\n    margin-top: 20px;\r\n    background-color: #081029;\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: white;\r\n    font-family: $Exo;\r\n}\r\n\r\n.icons {\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n.star {\r\n    margin-left: 10px;\r\n    font-size: 35px;\r\n    position: absolute;\r\n}\r\n.star:hover {\r\n    cursor: pointer;\r\n}\r\n.star-active {\r\n    color: yellow;\r\n}\r\n.change-deg {\r\n    width: 38px;\r\n    height: 38px;\r\n    background-color: #252f4e;\r\n    margin-left: 20px;\r\n    margin-top: 22px;\r\n    font-size: 25px;\r\n    text-align: center;\r\n    line-height: 35px;\r\n    border-radius: 20px;\r\n    transition: 0.4s;\r\n}\r\n.change-deg:hover, .fav-button:hover {\r\n    cursor: pointer;\r\n    background-color: #2e395d;\r\n    transition: 0.4s;\r\n}\r\n.upper-day, .bottom-day {\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 99%;\r\n    height: 45%;\r\n}\r\n.temp, .city, .humidity, .wind, .feel {\r\n    margin: 20px;\r\n    margin-top: 10px;\r\n    display: flex;\r\n}\r\n\r\n.display-week {\r\n    display: flex;\r\n    margin-top: 30px;\r\n    width: 100%;\r\n    height: 40%;\r\n    justify-content: space-around;\r\n}\r\n\r\n.card {\r\n    width: 86px;\r\n    height: 147px;\r\n    border-radius: 5px;\r\n    background-color: #081029;\r\n    transition: 0.4s;\r\n}\r\n\r\n.card:hover {\r\n    background-color: #0c1633;\r\n    cursor: pointer;\r\n    transition: 0.4s;\r\n    margin-top: -7px;\r\n}\r\n\r\n.week-day, .week-status, .week-temp {\r\n    color: white;\r\n    font-family: $Roboto;\r\n    text-align: center;\r\n    margin-top: 3px;\r\n    margin-bottom: 8px;\r\n}\r\n\r\n\r\n.head-side {\r\n    color: white;\r\n    margin: 3px;\r\n    font-family: $Exo;\r\n    text-align: center\r\n}\r\n\r\n.city-block {\r\n    height: 39px;\r\n    color: white;\r\n    font-family: $Exo;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n}\r\n.city-block-text {\r\n    text-align: center;\r\n}\r\n.city-block:hover {\r\n    background-color: $main-dark;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n.fav-button {\r\n    width: 10%;\r\n    height: 38px;\r\n    @include default-text();\r\n    background-color: #252f4e;\r\n    text-align: center;\r\n    margin-top: 20px;\r\n    border-radius: 10px;\r\n    transition: 0.4s;\r\n    h2 {\r\n        margin: 0px;\r\n        margin-top: 2px;\r\n    }\r\n}\r\n\r\n.delete-city {\r\n    display: none;\r\n}\r\n\r\n.city-block:hover .delete-city {\r\n    width: 15px;\r\n    height: 15px;\r\n    display: inline-block;\r\n    background: url('../img/cancel.svg') no-repeat;\r\n    background-size: 15px;\r\n    margin-left: 95px;\r\n    position: absolute;\r\n    border: 0px;\r\n    @include media(\">0px\", \"<1210px\") {\r\n        margin-left: 55px;\r\n    };\r\n    cursor: pointer;\r\n}\r\n\r\n.city-block:hover .delete-city:hover {\r\n    background: url('../img/cancel-hover.svg') no-repeat;\r\n    background-size: 15px;\r\n}\r\n\r\n.history-list-active {\r\n    @include sidebars($left: false);\r\n}\r\n\r\n.history-list {\r\n    @include sidebarsAct($left: false);\r\n}\r\n.favorite-list-active {\r\n    @include sidebars($left: true);\r\n}\r\n\r\n.favorite-list {\r\n    @include sidebarsAct($left: true)\r\n}","@charset \"UTF-8\";\r\n\r\n//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.9\r\n//\r\n//                http://include-media.com\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Hugo Giraudel (@hugogiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n\r\n\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  'phone': 320px,\r\n  'tablet': 768px,\r\n  'desktop': 1024px\r\n) !default;\r\n\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  'screen': 'screen',\r\n  'print': 'print',\r\n  'handheld': 'handheld',\r\n  'landscape': '(orientation: landscape)',\r\n  'portrait': '(orientation: portrait)',\r\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  'px': 1,\r\n  'em': 0.01,\r\n  'rem': 0.1,\r\n  '': 0\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if feature-exists('at-error') {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {}\r\n}\r\n\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: 'width';\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log('Unknown unit `#{unit($value)}`.');\r\n  }\r\n\r\n  @if $operator == '>' {\r\n    $value: $value + $interval;\r\n  } @else if $operator == '<' {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Hugo Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == 'number' {\r\n    @return $value;\r\n  } @else if type-of($value) != 'string' {\r\n    $_: im-log('Value for `to-number` should be a number or a string.');\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == '-');\r\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == '+' or $first-character == '-') {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n    }\r\n\r\n    @if $character == '.' {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: im-log('Invalid unit `#{$unit}`.');\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Hugo Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}"]}